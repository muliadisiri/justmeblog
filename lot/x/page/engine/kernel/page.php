<?php class Page extends File{protected $a;protected $h;protected $lot;protected $read;protected function _get(string $kin,array $lot=[]){$v=$this->offsetGet($kin)??$this->a[$kin]??null;if(empty($this->read[$kin])||2!==$this->read[$kin]){$v=Hook::fire(map($this->h,function($v)use($kin){return $v.='.'.$kin;}),[$v,$lot],$this);if($lot&&is_callable($v)&&!is_string($v)){$v=call_user_func($v,...$lot);}$this->read[$kin]=2;$this->lot[$kin]=$v;}return $v;}public function __call(string $kin,array $lot=[]){if(parent::_($kin=p2f($kin))){return parent::__call($kin,$lot);}return $this->_get($kin,$lot);}public function __construct(string $path=null,array $lot=[]){$this->h=[$c=c2f(self::class)];$this->a=array_replace_recursive((array)State::get('x.'.$c.'.page',true),$lot);parent::__construct($path);}public function __get(string $key){return parent::__get($key)??$this->__call($key);}public function __set(string $key,$value){$this->offsetSet(p2f($key),$value);}public function __toString(){return To::page($this->lot??[]);}public function ID(...$lot){$id=$this->_get('id',$lot)??(($t=$this->time()->format('U'))?sprintf('%u',$t):null);return is_string($id)&&is_numeric($id)?(int)$id:$id;}public function URL(...$lot){if($this->exist){return $this->_get('url',$lot)??trim($GLOBALS['url'].'/'.Path::R(Path::F($this->path),LOT.DS.'page','/'),'/');}return null;}public function content(...$lot){return $this->_get('content',$lot);}public function get(...$lot){if(isset($lot[0])&&is_array($lot[0])){$out=[];foreach($lot[0]as $k=>$v){if(false!==strpos($k,'.')){$kk=explode('.',$k,2);if(is_array($vv=$this->_get($kk[0]))){$out[$k]=get($vv,$kk[1])??$v;continue;}}$out[$k]=$this->_get($k)??$v;}return $out;}if(isset($lot[0])&&is_string($lot[0])){if(false!==strpos($lot[0],'.')){$k=explode('.',$lot[0],2);if(is_array($v=$this->_get($k[0]))){return get($v,$k[1]);}}return $this->_get($lot[0]);}return null;}public function getIterator(){$out=[];if($this->exist){$out=From::page(file_get_contents($path=$this->path),true);foreach(g(Path::F($path),'data')as $k=>$v){$out[basename($k,'.data')]=e(file_get_contents($k));}}return new \ArrayIterator($out);}public function jsonSerialize(){return $this->exist?From::page(file_get_contents($this->path),true):[];}public function offsetGet($key){if($this->exist&&empty($this->read[$key])){if(is_file($f=Path::F($this->path).DS.$key.'.data')){$this->read[$key]=1;return($this->lot[$key]=a(e(file_get_contents($f))));}$exist='content'===$key;foreach(stream($path=$this->path)as $k=>$v){if(0===$k&&YAML\SOH."\n"!==$v){break;}if(YAML\EOT."\n"===$v){break;}if(0===strpos($v,$key.':')||0===strpos($v,'"'.strtr($key,['"'=>"\\\""]).'":')||0===strpos($v,"'".strtr($key,["'"=>"\\'"])."':")){$exist=true;break;}}if($exist){$any=From::page(file_get_contents($path),true);foreach($any as $k=>$v){$this->read[$k]=1;}$this->lot=array_replace_recursive($this->lot??[],$any);}$this->lot=array_replace_recursive($this->a??[],$this->lot??[]);}return $this->lot[$key]??null;}public function offsetSet($key,$value){if(isset($key)){$this->lot[$key]=$value;}else{$this->lot[]=$value;}}public function offsetUnset($key){unset($this->lot[$key]);}public function save($seal=null){$lot=$this->lot??[];$lot=j($lot,$this->a);$this->value[0]=To::page($lot);return parent::save($seal);}public function set(...$lot){if(!$this->exist){$this->lot=[];}if(isset($lot[0])){if(is_array($lot[0])){foreach($lot[0]as $k=>$v){if(null===$v||false===$v){unset($this->lot[$k]);continue;}$this->lot[$k]=$v;}}else if(array_key_exists(1,$lot)){if(!isset($lot[1])||false===$lot[1]){unset($this->lot[$lot[0]]);}else{$this->lot[$lot[0]]=$lot[1];}}else{$this->lot['content']=$lot[0];}}else if(!isset($lot[0])||false===$lot[0]){unset($this->lot['content']);}return $this;}public function time(string $format=null){$n=parent::name();if(is_string($n)&&(2===substr_count($n,'-')||5===substr_count($n,'-'))&&is_numeric(str_replace('-',"",$n))&&preg_match('/^[1-9]\d{3,}-(0\d|1[0-2])-(0\d|[1-2]\d|3[0-1])(-([0-1]\d|2[0-4])(-([0-5]\d|60)){2})?$/',$n)){$time=new Time($n);}else{$time=new Time($this->offsetGet('time')??parent::time());}return $format?$time($format):$time;}public function type(...$lot){return $this->_get('type',$lot)??'text/html';}}